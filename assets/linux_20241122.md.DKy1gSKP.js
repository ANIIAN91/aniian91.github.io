import{_ as a,c as e,o as n,R as s}from"./chunks/framework.C6kDZlj-.js";const m=JSON.parse('{"title":"部署Github Pages遇到的坑","description":"","frontmatter":{},"headers":[],"relativePath":"linux/20241122.md","filePath":"linux/20241122.md","lastUpdated":1732933722000}'),i={name:"linux/20241122.md"},t=s('<h1 id="部署github-pages遇到的坑" tabindex="-1">部署Github Pages遇到的坑 <a class="header-anchor" href="#部署github-pages遇到的坑" aria-label="Permalink to &quot;部署Github Pages遇到的坑&quot;">​</a></h1><p>对于GitHub Pages不是很熟悉，初次体验用了两天来熟悉并部署好，虽然成功了，但还是有很多地方是迷糊的，暂时把遇到的一些问题记录下来，后续可能会用到</p><h2 id="npx-vitepress-build-和-npm-run-build" tabindex="-1"><code>npx vitepress build</code> 和 <code>npm run build</code> <a class="header-anchor" href="#npx-vitepress-build-和-npm-run-build" aria-label="Permalink to &quot;`npx vitepress build` 和 `npm run build`&quot;">​</a></h2><p>npx 是 临时执行 命令的工具，而不需要将包全局安装。 npm run build 需要在你的 package.json 文件中定义一个 build 脚本。 虽然看起来没有区别，但是在我使用的过程中还是有区别的，至于什么区别不想了解，但是影响到我了</p><h2 id="用户-组织页面-和-仓库页面" tabindex="-1"><code>用户/组织页面</code> 和 <code>仓库页面</code> <a class="header-anchor" href="#用户-组织页面-和-仓库页面" aria-label="Permalink to &quot;`用户/组织页面` 和 `仓库页面`&quot;">​</a></h2><p>用户/组织页面 使用 base: &#39;/&#39;。<br> 仓库页面 使用 base: &#39;/repo-name/&#39;。</p><h2 id="main-和-gh-pages" tabindex="-1"><code>main</code> 和 <code>gh-pages</code> <a class="header-anchor" href="#main-和-gh-pages" aria-label="Permalink to &quot;`main` 和 `gh-pages`&quot;">​</a></h2><p><code>main</code>用于存储和开发项目的源代码，<code>gh-pages</code>用于存储和部署构建后的静态网站文件<br> 正常来说推送源代码（这里是markdown文件）到 main 分支后GitHub Actions 会将构建生成的静态文件推送到 gh-pages 分支，GitHub Pages 会从 gh-pages 分支获取并部署这些文件。</p><h2 id="git操作" tabindex="-1"><code>git</code>操作 <a class="header-anchor" href="#git操作" aria-label="Permalink to &quot;`git`操作&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git branch      //检查分支，查看当前所有分支</span></span>\n<span class="line"><span>git checkout main   // 切换分支，切换到main分支</span></span>\n<span class="line"><span>git add .       // 添加到缓存区，将所有更改添加到暂存区</span></span>\n<span class="line"><span>git commit -m &quot;Commit message&quot;  // 提交更改，使用指定的提交信息</span></span>\n<span class="line"><span>git push origin main --force    //强制推送，将更改推送到远程main分支</span></span>\n<span class="line"><span>git log origin/main     //查看日志，查看远程main分支的提交历史</span></span></code></pre></div>',10),o=[t];function p(d,c,l,r,h,u){return n(),e("div",null,o)}const b=a(i,[["render",p]]);export{m as __pageData,b as default};
