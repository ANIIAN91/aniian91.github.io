import{_ as r,c as l,o,R as t}from"./chunks/framework.C6kDZlj-.js";const b=JSON.parse('{"title":"对2024年11月的总结","description":"","frontmatter":{},"headers":[],"relativePath":"learn-life/20241200.md","filePath":"learn-life/20241200.md","lastUpdated":1733709894000}'),i={name:"learn-life/20241200.md"},a=t('<h1 id="对2024年11月的总结" tabindex="-1">对2024年11月的总结 <a class="header-anchor" href="#对2024年11月的总结" aria-label="Permalink to &quot;对2024年11月的总结&quot;">​</a></h1><p>接下来的计划是：</p><ol><li>多目标追踪与重识别的关系和一些交叉问题</li><li>重识别的具体定义和包含的一些概念</li><li>重识别与多目标追踪结合的一些问题</li><li>重识别的发展历史与历程</li><li><strong>然后尽量先把综述写出来</strong></li></ol><h2 id="多目标追踪与重识别概述" tabindex="-1">多目标追踪与重识别概述 <a class="header-anchor" href="#多目标追踪与重识别概述" aria-label="Permalink to &quot;多目标追踪与重识别概述&quot;">​</a></h2><h3 id="一-多目标追踪-mot" tabindex="-1">（一）多目标追踪（MOT） <a class="header-anchor" href="#一-多目标追踪-mot" aria-label="Permalink to &quot;（一）多目标追踪（MOT）&quot;">​</a></h3><ol><li><p><strong>定义与目标</strong><br> 多目标追踪旨在从视频序列中检测并跟踪多个目标，为每个目标赋予唯一的ID，以实现轨迹预测和行为分析。</p></li><li><p><strong>面临的挑战</strong></p><ul><li><strong>应对遮挡</strong>：追踪对象可能被其他对象或障碍物遮挡，鲁棒的追踪算法需在对象重新出现时继续追踪。</li><li><strong>处理相似对象</strong>：在存在多个相似外观对象的场景中，要正确区分和持续追踪各个独立对象。</li><li><strong>动态背景与光照变化</strong>：需在背景动态变化或光照条件差异显著的环境中有效工作。</li></ul></li></ol><h3 id="二-重识别-re-id" tabindex="-1">（二）重识别（Re-ID） <a class="header-anchor" href="#二-重识别-re-id" aria-label="Permalink to &quot;（二）重识别（Re-ID）&quot;">​</a></h3><ol><li><p><strong>定义与目标</strong><br> 重识别是在不同时间或不同摄像头下，识别并匹配同一目标的技术，主要关注目标在空间上的一致性，用于跨摄像头的目标匹配。</p></li><li><p><strong>面临的挑战</strong></p><ul><li><strong>外观变化应对</strong>：同一对象在不同摄像头、时间点或环境条件下可能出现外观变化，系统需准确识别。</li><li><strong>跨摄像头追踪</strong>：要在不同摄像头视角下正确识别并关联同一对象的不同观察实例。</li></ul></li></ol><h3 id="三-多目标追踪与重识别的关系及交叉问题" tabindex="-1">（三）多目标追踪与重识别的关系及交叉问题 <a class="header-anchor" href="#三-多目标追踪与重识别的关系及交叉问题" aria-label="Permalink to &quot;（三）多目标追踪与重识别的关系及交叉问题&quot;">​</a></h3><ol><li><p><strong>特征共享</strong><br> 重识别的特征提取方法可用于多目标追踪中的目标关联，提高跟踪准确性。</p></li><li><p><strong>联合建模</strong><br> 一些研究将两者结合，利用重识别特征增强跟踪鲁棒性，特别是在目标短暂消失或被遮挡时。</p></li></ol><h3 id="四-鲁棒性" tabindex="-1">（四）鲁棒性 <a class="header-anchor" href="#四-鲁棒性" aria-label="Permalink to &quot;（四）鲁棒性&quot;">​</a></h3><ol><li><p><strong>定义</strong><br> 模型在面对输入数据中的噪声、异常值或微小扰动时，仍能保持性能稳定、不受显著影响的能力。鲁棒性强的模型在处理含噪声或异常的数据时，能做出准确预测或分类。</p></li><li><p><strong>提高鲁棒性的方法</strong></p><ul><li><strong>数据增强</strong>：对训练数据应用变换（如旋转、缩放、裁剪等）模拟多样化场景，增强模型对异常输入的容忍性。</li><li><strong>特征工程</strong>：设计更具区分力的特征提取器，处理复杂场景和外观变化。</li><li><strong>模型融合与决策级集成</strong>：结合多个模型或算法输出提高整体准确率和鲁棒性。</li></ul></li></ol><h2 id="重识别的发展历程与贡献" tabindex="-1">重识别的发展历程与贡献 <a class="header-anchor" href="#重识别的发展历程与贡献" aria-label="Permalink to &quot;重识别的发展历程与贡献&quot;">​</a></h2><h3 id="一-早期阶段-1996-2013-基于手工特征的方法" tabindex="-1">（一）早期阶段（1996 - 2013）：基于手工特征的方法 <a class="header-anchor" href="#一-早期阶段-1996-2013-基于手工特征的方法" aria-label="Permalink to &quot;（一）早期阶段（1996 - 2013）：基于手工特征的方法&quot;">​</a></h3><ol><li><p><strong>2007年</strong><br> Farenzena等人提出基于对称性的局部特征提取方法用于行人重识别，是早期里程碑式工作。</p></li><li><p><strong>2010年</strong><br> Gray和Tao提出专门用于重识别的特征组合方法，引入行人外观描述符，结合颜色、纹理特征提升匹配效果。</p></li></ol><h3 id="二-深度学习兴起-2014-2016-基于深度学习的特征提取方法" tabindex="-1">（二）深度学习兴起（2014 - 2016）：基于深度学习的特征提取方法 <a class="header-anchor" href="#二-深度学习兴起-2014-2016-基于深度学习的特征提取方法" aria-label="Permalink to &quot;（二）深度学习兴起（2014 - 2016）：基于深度学习的特征提取方法&quot;">​</a></h3><ol><li><p><strong>2014年</strong><br> Li等人首次提出基于深度学习的Re-ID方法，利用CNN构建行人识别模型。</p></li><li><p><strong>2016年</strong><br> Zheng等人提出基准数据集Market - 1501，推动了Re-ID研究发展。</p></li></ol><h3 id="三-大规模数据集与度量学习方法-2016-至今-跨摄像头匹配和度量学习" tabindex="-1">（三）大规模数据集与度量学习方法（2016 - 至今）：跨摄像头匹配和度量学习 <a class="header-anchor" href="#三-大规模数据集与度量学习方法-2016-至今-跨摄像头匹配和度量学习" aria-label="Permalink to &quot;（三）大规模数据集与度量学习方法（2016 - 至今）：跨摄像头匹配和度量学习&quot;">​</a></h3><ol><li><p><strong>2016年</strong><br> Hermans等人提出三元损失用于Re-ID任务，提升模型性能。</p></li><li><p><strong>2018年</strong><br> Sun等人提出基于部分的特征池化方法PCB，提高行人重识别精度和鲁棒性。</p></li><li><p><strong>2019年</strong><br> Zhong等人利用域适应和样本记忆机制解决跨摄像头和跨域识别问题。</p></li></ol><h3 id="四-自监督与无监督学习的发展-2020年-至今" tabindex="-1">（四）自监督与无监督学习的发展（2020年 - 至今） <a class="header-anchor" href="#四-自监督与无监督学习的发展-2020年-至今" aria-label="Permalink to &quot;（四）自监督与无监督学习的发展（2020年 - 至今）&quot;">​</a></h3><ol><li><p><strong>2020年</strong><br> Ge等人通过自监督对比学习在无监督环境下学习有效特征表示。</p></li><li><p><strong>2021年</strong><br> Chen等人提出基于异构图对齐网络的重识别模型，提升跨域跨摄像头适用性。</p></li></ol><h3 id="五-当前的研究热点与发展方向" tabindex="-1">（五）当前的研究热点与发展方向 <a class="header-anchor" href="#五-当前的研究热点与发展方向" aria-label="Permalink to &quot;（五）当前的研究热点与发展方向&quot;">​</a></h3><ol><li><p><strong>无监督与自监督学习</strong><br> 通过对比学习、自适应域迁移等方法，让重识别模型在无标签或少标签数据上有良好表现。</p></li><li><p><strong>跨域、跨摄像头的鲁棒性</strong><br> 提升模型在不同场景、摄像头之间的泛化能力。</p></li><li><p><strong>实时性与低计算成本</strong><br> 优化模型计算速度与内存占用，适应实际监控应用。</p></li></ol><h2 id="重识别在农业领域的应用" tabindex="-1">重识别在农业领域的应用 <a class="header-anchor" href="#重识别在农业领域的应用" aria-label="Permalink to &quot;重识别在农业领域的应用&quot;">​</a></h2><h3 id="一-牲畜识别与追踪" tabindex="-1">（一）牲畜识别与追踪 <a class="header-anchor" href="#一-牲畜识别与追踪" aria-label="Permalink to &quot;（一）牲畜识别与追踪&quot;">​</a></h3><p>利用重识别技术对农场中的牲畜进行个体识别和追踪，监控其健康状况和行为模式。2023年有研究者在相关论文中探讨了深度学习在牲畜重识别中的应用，提出基于卷积神经网络的牲畜识别方法。</p><h3 id="二-农作物生长监测" tabindex="-1">（二）农作物生长监测 <a class="header-anchor" href="#二-农作物生长监测" aria-label="Permalink to &quot;（二）农作物生长监测&quot;">​</a></h3><p>通过重识别技术识别并追踪特定农作物的生长情况，评估其健康状态和生长速度。2023年有研究者提出基于深度学习的植物重识别方法用于监测农作物生长。</p><h3 id="三-鱼类识别" tabindex="-1">（三）鱼类识别 <a class="header-anchor" href="#三-鱼类识别" aria-label="Permalink to &quot;（三）鱼类识别&quot;">​</a></h3><p>在水产养殖中，用于识别和追踪个体鱼类，监控其生长和健康状况。相关研究总结在“深度学习在农业领域应用论文笔记12”中。</p><h2 id="重识别领域的专有名词和特殊概念" tabindex="-1">重识别领域的专有名词和特殊概念 <a class="header-anchor" href="#重识别领域的专有名词和特殊概念" aria-label="Permalink to &quot;重识别领域的专有名词和特殊概念&quot;">​</a></h2><ol><li><p><strong>多目标追踪（Multiple Object Tracking, MOT）</strong><br> 在视频序列中同时检测并跟踪多个目标，赋予ID并实现轨迹预测和行为分析。</p></li><li><p><strong>重识别（Re - Identification, Re - ID）</strong><br> 在不同时间或摄像头下识别并匹配同一目标，用于跨摄像头匹配。</p></li><li><p><strong>特征提取（Feature Extraction）</strong><br> 从图像或视频中提取代表目标身份的特征。</p></li><li><p><strong>度量学习（Metric Learning）</strong><br> 学习度量空间，使同一目标特征距离近，不同目标距离远。</p></li><li><p><strong>三元组损失（Triplet Loss）</strong><br> 训练模型使同一目标特征距离小于不同目标的损失函数。</p></li><li><p><strong>自监督学习（Self - Supervised Learning）</strong><br> 无需人工标注，利用数据自身结构信息学习。</p></li><li><p><strong>无监督学习（Unsupervised Learning）</strong><br> 在无标签数据下通过内在结构学习，用于领域适应和特征学习。</p></li><li><p><strong>域适应（Domain Adaptation）</strong><br> 使模型从源域知识适应目标域，提高泛化能力。</p></li><li><p><strong>多模态融合（Multi - Modal Fusion）</strong><br> 融合不同模态信息提升模型性能和鲁棒性。</p></li><li><p><strong>3D信息（3D Information）</strong><br> 利用三维传感器获取点云数据提供目标三维结构信息。</p></li></ol><p><strong>1. 多目标追踪与重识别的关系及交叉问题</strong> 多目标追踪（Multiple Object Tracking, MOT）和重识别（Re-Identification, Re-ID）在计算机视觉领域密切相关，但各自关注的重点有所不同。</p><ul><li><strong>多目标追踪（MOT）</strong>：旨在从视频序列中检测并跟踪多个目标，赋予每个目标唯一的ID，以实现轨迹预测和行为分析。MOT主要在单个摄像头的连续帧中进行，关注目标在时间上的连续性。</li><li><strong>重识别（Re-ID）</strong>：在不同时间或不同摄像头下，识别并匹配同一目标的技术。Re-ID关注目标在空间上的一致性，主要用于跨摄像头的目标匹配。</li></ul><p><strong>交叉问题</strong>：</p><ul><li><strong>特征共享</strong>：重识别的特征提取方法可用于多目标追踪中的目标关联，提高跟踪的准确性。</li><li><strong>联合建模</strong>：一些研究将重识别与多目标追踪结合，利用重识别特征增强跟踪的鲁棒性，特别是在目标短暂消失或被遮挡的情况下。</li></ul><p><strong>2. 重识别的定义及相关概念</strong></p><p>重识别（Re-Identification, Re-ID）是利用计算机视觉技术，在不同时间或不同摄像头下，识别并匹配同一目标的技术。其主要概念包括：</p><ul><li><strong>特征提取</strong>：从图像中提取能够代表目标身份的特征，如颜色、纹理、形状等。</li><li><strong>度量学习</strong>：学习一个度量空间，使得同一目标的特征距离更近，不同目标的特征距离更远。</li><li><strong>跨摄像头匹配</strong>：在不同摄像头下，考虑视角、光照、分辨率等变化，匹配同一目标。</li></ul><p><strong>3. 重识别与多目标追踪结合的问题</strong></p><p>将重识别与多目标追踪结合时，需要解决以下问题：</p><ul><li><strong>特征适配</strong>：重识别特征通常是全局特征，而多目标追踪更关注局部特征。直接应用重识别特征可能导致跟踪性能下降，需要进行特征适配。</li><li><strong>实时性</strong>：多目标追踪要求实时处理，而重识别模型通常计算复杂，需要优化以满足实时性要求。</li><li><strong>遮挡处理</strong>：在目标被遮挡或消失的情况下，如何利用重识别特征重新识别目标，是一个挑战。</li></ul><p><strong>4. 重识别的发展历史与历程</strong></p><p>重识别的研究始于20世纪90年代，随着计算机视觉和深度学习的发展，经历了以下阶段：</p><ul><li><strong>早期研究（1996-2013年）</strong>：主要基于手工特征和传统机器学习方法，研究规模较小，性能有限。</li><li><strong>深度学习兴起（2014-2016年）</strong>：深度学习方法被引入重识别领域，利用卷积神经网络（CNN）提取特征，性能显著提升。</li><li><strong>大规模数据集与评测（2016年至今）</strong>：出现了如Market-1501、DukeMTMC-reID等大规模数据集，推动了算法的发展和评测标准的建立。</li></ul><h2 id="选择性特征融合" tabindex="-1">选择性特征融合 <a class="header-anchor" href="#选择性特征融合" aria-label="Permalink to &quot;选择性特征融合&quot;">​</a></h2><p>实时语义分割任务中，卷积神经网络（CNN）通常与全卷积模型结合使用以提高精度和效率。然而，高分辨率细节与低频上下文直接融合导致细节特征容易被周围环境信息淹没。</p><h2 id="切入点和创新点" tabindex="-1">切入点和创新点 <a class="header-anchor" href="#切入点和创新点" aria-label="Permalink to &quot;切入点和创新点&quot;">​</a></h2><p><strong>切入点(Approach)</strong>： 切入点指的是你在总结论文时，如何将当前研究与已有的相关工作进行联系和过渡。它描述了你如何基于前人的工作，为本研究奠定基础，并推导出自己的研究动机和目标。切入点体现了你对前人研究的理解和继承，以及如何将自己的工作与之关联。</p><p><strong>创新点(Novelty/Contribution)</strong>： 创新点则是指你在本研究中提出的新颖性和独创性之处。它突出了你的研究与既有工作相比的差异和优势，强调了你的工作对该领域的贡献。创新点可以体现在研究方法、算法设计、应用场景、实验结果等多个方面。</p><p>总的来说： 切入点关注于如何从前人工作出发，引出并定义你自己的研究； 创新点则重点阐述你的研究中最大的亮点和创新之处。</p><h2 id="构建复杂神经网络架构时采用的模块缝合" tabindex="-1">构建复杂神经网络架构时采用的模块缝合 <a class="header-anchor" href="#构建复杂神经网络架构时采用的模块缝合" aria-label="Permalink to &quot;构建复杂神经网络架构时采用的模块缝合&quot;">​</a></h2><ol><li><strong>串行（Sequential）</strong>：数据依次流经各模块，前一模块输出为下一模块输入，类似流水线作业使输出结果逐步精细化，如经典CNN网络LeNet、VGG中卷积层和池化层多以此方式排列。</li><li><strong>并行（Parallel）</strong>：输入数据可同时送往多个模块独立处理不同任务，能提高计算效率与处理速度，在多处理器或GPU环境优势明显，像GoogLeNet中的Inception模块在同一层级有多个卷积、池化操作并行执行。</li><li><strong>交互（Interactive）</strong>：不同模块间存在反馈或信息交换机制，输出可互为输入，能让网络深层形成复杂信息交流路径，便于根据反馈调整学习及特征提取，如Transformer中的自注意力层。</li><li><strong>多尺度融合（Multi-scale Fusion）</strong>：将不同尺寸或分辨率的数据组合，以同时捕捉粗、细粒度特征，助模型在不同层级理解数据不同方面，常用于需兼顾局部细节与全局上下文的任务，例如FPN用于目标检测可改善对不同尺寸目标的检测能力。</li></ol><h2 id="线性决策边界、线性svm和非线性支持向量机" tabindex="-1">线性决策边界、线性SVM和非线性支持向量机 <a class="header-anchor" href="#线性决策边界、线性svm和非线性支持向量机" aria-label="Permalink to &quot;线性决策边界、线性SVM和非线性支持向量机&quot;">​</a></h2><h3 id="整体总结" tabindex="-1">整体总结 <a class="header-anchor" href="#整体总结" aria-label="Permalink to &quot;整体总结&quot;">​</a></h3><p>线性决策边界是一种简单直观的方式，用于划分不同类别的数据点。它通过直线（二维）或平面（高维）来区分，计算量小，但仅适用于线性可分的数据，对噪声敏感且泛化能力有限。线性SVM作为经典的二分类模型，旨在寻找最大间隔超平面，依赖少数支持向量点，并可引入软间隔，在计算效率、泛化能力及鲁棒性方面表现良好，主要针对线性可分问题。非线性支持向量机则利用核技巧将数据映射到高维空间，将非线性问题转化为线性问题，能够处理复杂的非线性情况，具有强泛化能力并可避免维度灾难，但其计算复杂度高，核函数选择与参数调优较为困难。</p><h3 id="三者区分" tabindex="-1">三者区分 <a class="header-anchor" href="#三者区分" aria-label="Permalink to &quot;三者区分&quot;">​</a></h3><p>线性决策边界仅从几何角度简单地用直线或平面区分数据，缺乏像SVM那样基于优化的边界确定机制，能力有限，仅适用于线性可分数据。线性SVM相比之下，具有严谨的数学优化目标和约束条件，科学地确定最优线性决策边界，并通过软间隔增强实用性，处理线性可分问题时更为强大可靠。非线性支持向量机的最大特点是能够处理非线性问题，通过核函数将数据“变”到高维空间，使原本在低维空间难以用直线分开的数据变得可以线性划分，但也因此带来了计算和调参的复杂性。</p><h3 id="各自特点-白话解释" tabindex="-1">各自特点（白话解释） <a class="header-anchor" href="#各自特点-白话解释" aria-label="Permalink to &quot;各自特点（白话解释）&quot;">​</a></h3><ul><li><p><strong>线性决策边界</strong>：</p><ul><li><strong>形式简单，计算量小</strong>：就像在纸上随手画条直线把不同颜色的点分开一样容易，计算过程不复杂，不像其他复杂算法需要耗费大量时间计算。</li><li><strong>只能处理线性可分的数据</strong>：只有当数据能整齐地用直线或平面分开时才有效，若数据分布混乱，无法用直线平面清晰划分，它就无能为力。</li><li><strong>对噪声数据敏感</strong>：若原本能分开的数据中有几个“捣乱”的点位置不对，原本有效的分界线可能失效，容易受异常点影响。</li><li><strong>泛化能力有限</strong>：处理已见过的数据时还行，但遇到新数据，可能表现不佳，适应新情况的能力不强。</li></ul></li><li><p><strong>线性SVM</strong>：</p><ul><li><strong>有理论保证的泛化界</strong>：从数学原理上来说，对于未见过的数据处理效果有依据、有保障，不是瞎猜的，因此在面对新数据时表现令人放心。</li><li><strong>计算效率高</strong>：运算速度快，不会让你等很久才能得到结果，处理数据时不会占用太多时间和资源。</li><li><strong>鲁棒性好</strong>：即便数据中存在一些小错误、小异常，比如个别数据标记错了，它也能稳稳地把类别分好，不会因小状况而导致分类混乱。</li></ul></li><li><p><strong>非线性支持向量机</strong>：</p><ul><li><strong>可以处理非线性问题</strong>：无论数据在原空间中形状多奇怪、分布多复杂，它都有可能通过核函数将数据“送”到高维空间，然后用直线分开，能解决棘手的非线性分类难题。</li><li><strong>泛化能力强</strong>：遇到新数据时，通常能较好地做出正确分类，适应新情况的能力突出，不像有些方法只在熟悉的数据上表现好，遇到新情况就不行。</li><li><strong>避免维度灾难</strong>：当数据维度变高时，很多算法会出问题，计算量暴增且结果不准，但它能应对高维情况，不会被高维度搞“懵”，依然能正常发挥作用。</li><li><strong>计算复杂度高</strong>：缺点是计算复杂，像完成复杂大工程，需要花费不少时间和计算资源，难以快速得出结果。</li><li><strong>核函数选择需要经验</strong>：挑选核函数如挑选合适工具干活，需有经验，不同核函数在不同数据上效果差异大，选错可能无法分好类别，需清楚数据适合用哪种核函数。</li><li><strong>参数调优困难</strong>：将内部参数调整到最佳状态不易，需反复尝试、不断摸索，如调收音机找最清晰的台，需费大劲才能达到最佳分类效果。</li></ul></li></ul>',60),n=[a];function s(e,g,h,p,d,u){return o(),l("div",null,n)}const q=r(i,[["render",s]]);export{b as __pageData,q as default};
