import{_ as t,c as d,o as r,R as o}from"./chunks/framework.C6kDZlj-.js";const m=JSON.parse('{"title":"数据结构以及算法","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/index.md","filePath":"algorithm/index.md","lastUpdated":1733565366000}'),e={name:"algorithm/index.md"},n=o('<h1 id="数据结构以及算法" tabindex="-1">数据结构以及算法 <a class="header-anchor" href="#数据结构以及算法" aria-label="Permalink to &quot;数据结构以及算法&quot;">​</a></h1><table><thead><tr><th><strong>算法/知识点</strong></th><th><strong>解释说明</strong></th></tr></thead><tbody><tr><td><a href="./tulun.html">图论</a></td><td>包括最短路径、最小生成树、拓扑排序、网络流等问题，常用于解决网络、路径规划等场景。</td></tr><tr><td>最短路径算法</td><td>用于图论中求解两点之间或多个点之间的最短路径问题，如 Dijkstra、Floyd、Bellman-Ford 算法。</td></tr><tr><td>排序</td><td>包括快速排序、归并排序等，常用于数据组织和处理，如推荐系统中的优先级排序。</td></tr><tr><td>模拟</td><td>通过代码模拟复杂流程或问题逻辑，适用于规则明确但没有固定公式的场景。</td></tr><tr><td>数据结构</td><td>涉及数组、链表、优先队列、树等基础数据结构，用于存储和高效访问数据。</td></tr><tr><td>字符串处理</td><td>处理字符串的解析、匹配、操作问题，广泛用于文本处理、协议模拟等场景。</td></tr><tr><td>动态规划</td><td>通过分解问题为子问题并记忆化处理，解决最优子结构问题，如最短路径、分段划分等问题。</td></tr><tr><td>数组操作</td><td>涉及数组遍历、递推关系的构造与操作，常用于数值模拟和统计问题。</td></tr><tr><td>条件判断</td><td>基于逻辑条件的判断与分支处理，适用于规则控制、决策和分类问题。</td></tr><tr><td>几何计算</td><td>解决几何问题如最小距离、角度计算等，常用于物理模拟和路径优化。</td></tr><tr><td>流量问题</td><td>图论中的最大流/最小割问题，适用于网络容量分配与优化，例如通信系统、货物运输。</td></tr><tr><td>搜索算法</td><td>包括深度优先搜索（DFS）、广度优先搜索（BFS），用于路径搜索或解空间的遍历。</td></tr><tr><td>优化算法</td><td>包括贪心算法和动态规划优化，用于求解复杂问题的最优解。</td></tr><tr><td>数学计算</td><td>包括基本代数运算、数论问题，如数列分析、统计计算、归一化处理。</td></tr><tr><td>贪心算法</td><td>每一步选择局部最优解，适用于问题具有贪心选择性质的场景，如卡牌收集、任务调度。</td></tr><tr><td>递归</td><td>函数自调用，用于解决具有重复子结构的问题，如二十四点、深度优先搜索等。</td></tr><tr><td>深度优先搜索（DFS）</td><td>图论中的搜索算法，用于遍历图或树的所有节点，适用于解路径、排列组合等问题。</td></tr><tr><td>二分查找</td><td>基于有序数组的查找算法，通过逐步缩小范围快速定位目标值，用于优化查询与搜索问题。</td></tr><tr><td>拓扑排序</td><td>针对有向无环图（DAG）的排序算法，用于依赖关系问题，如任务调度、模块加载顺序等。</td></tr><tr><td>网络流</td><td>解决图中最大流量的分配问题，包括最大流、最小割等，应用于通信和物流网络优化。</td></tr><tr><td>分类算法</td><td>用于数据分类的线性或非线性方法，如线性分类器，用于模式识别或机器学习任务。</td></tr><tr><td>文件系统模拟</td><td>模拟文件系统操作，如文件配额管理、磁盘分配与文件树操作，用于操作系统相关问题。</td></tr></tbody></table><p><strong>高频算法/知识点:</strong> 如图论、最短路径算法、动态规划等，是解决复杂问题的核心，常见于各种路径规划、优化与网络相关问题。<br><strong>中等频算法/知识点：</strong> 如排序、模拟、数据结构等，主要用于数据组织、规则模拟和基础的计算问题。<br><strong>低频但重要：</strong> 如贪心算法、深度优先搜索等，在特定场景如路径搜索、最优选择问题中发挥关键作用。</p><table><thead><tr><th><strong>算法</strong></th><th><strong>核心思想</strong></th></tr></thead><tbody><tr><td><strong>排序算法</strong></td><td></td></tr><tr><td>冒泡排序（Bubble Sort）</td><td>通过比较相邻元素并交换位置，将最大或最小值逐步“冒泡”到数组一端。</td></tr><tr><td>插入排序（Insertion Sort）</td><td>将每个元素插入到前面已排序部分的正确位置。</td></tr><tr><td>选择排序（Selection Sort）</td><td>在未排序部分中找到最小或最大元素并放置到已排序部分的末尾。</td></tr><tr><td>快速排序（Quick Sort）</td><td>使用分治法，通过选取基准元素分割数组并递归排序两部分，平均复杂度较低。</td></tr><tr><td>归并排序（Merge Sort）</td><td>分治法，将数组分为两部分分别排序后合并，适合处理大数据或稳定排序需求。</td></tr><tr><td><strong>搜索算法</strong></td><td></td></tr><tr><td>深度优先搜索（DFS）</td><td>沿路径尽可能深入搜索节点，使用递归或栈实现，适合解路径或组合问题。</td></tr><tr><td>广度优先搜索（BFS）</td><td>一层一层地搜索节点，使用队列实现，适合寻找最短路径或最小步数问题。</td></tr><tr><td>二分搜索（Binary Search）</td><td>每次将查找范围缩小一半，快速定位有序数组中的目标元素。</td></tr><tr><td><strong>最短路径算法</strong></td><td></td></tr><tr><td>迪杰斯特拉算法（Dijkstra）</td><td>动态更新节点到起点的最短距离，适用于非负权图的单源最短路径问题。</td></tr><tr><td>弗洛伊德算法（Floyd）</td><td>动态规划方法计算任意两点间的最短路径，适用于带负权但无负权回路的图。</td></tr><tr><td><strong>最小生成树算法</strong></td><td></td></tr><tr><td>普里姆算法（Prim）</td><td>每次选择权值最小的边扩展生成树，适合稠密图。</td></tr><tr><td>克鲁斯卡尔算法（Kruskal）</td><td>按权值升序选择边，构造无回路的生成树，适合稀疏图。</td></tr><tr><td><strong>动态规划算法</strong></td><td></td></tr><tr><td>0-1 背包问题</td><td>选择物品放入背包，每个物品只能选一次，优化总价值。</td></tr><tr><td>完全背包问题</td><td>选择物品放入背包，每个物品可以选择多次，优化总价值。</td></tr><tr><td>最长公共子序列（LCS）</td><td>使用二维数组记录子序列长度，逐步构造两个序列的最长公共子序列。</td></tr><tr><td><strong>字符串算法</strong></td><td></td></tr><tr><td>暴力匹配算法</td><td>从主串的每个位置开始逐个字符匹配模式串，直到找到匹配或主串遍历结束。</td></tr><tr><td>KMP算法</td><td>通过前缀函数（next数组）优化匹配过程，避免重复比较，提高匹配效率。</td></tr><tr><td>字符串哈希</td><td>将字符串映射为哈希值，用于快速比较字符串是否相等或判断相似性。</td></tr></tbody></table>',4),a=[n];function s(g,i,l,h,_,c){return r(),d("div",null,a)}const b=t(e,[["render",s]]);export{m as __pageData,b as default};
