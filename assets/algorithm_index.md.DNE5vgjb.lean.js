import{_ as l,c as e,k as t,a as T,R as Q,o as a}from"./chunks/framework.C6kDZlj-.js";const i1=JSON.parse('{"title":"数据结构以及算法","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/index.md","filePath":"algorithm/index.md","lastUpdated":1732370879000}'),s={name:"algorithm/index.md"},o=Q("",3),n=t("li",null,"包括冒泡排序（Bubble Sort）、插入排序（Insertion Sort）、选择排序（Selection Sort）。这些排序算法是最基础的，用于对一组数据元素按照特定的顺序（如升序或降序）进行排列。例如，冒泡排序通过反复比较相邻的元素并交换位置，将最大（或最小）的元素逐步“冒泡”到数组的一端。",-1),r={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.052ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 4001 1000","aria-hidden":"true"},i=Q("",1),m=[i],h=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"O"),t("mo",{stretchy:"false"},"("),t("mi",null,"n"),t("mi",null,"l"),t("mi",null,"o"),t("mi",null,"g"),t("mi",null,"n"),t("mo",{stretchy:"false"},")")])],-1),p=t("p",null,[t("strong",null,"搜索算法")],-1),c=t("li",null,"深度优先搜索（Depth - First Search，DFS）和广度优先搜索（Breadth - First Search，BFS）是必须掌握的图搜索算法。深度优先搜索是沿着树或图的深度遍历节点，尽可能深地搜索树的分支，它通常使用递归或者栈来实现。广度优先搜索则是从根节点开始，一层一层地遍历节点，它需要使用队列来辅助实现。这些算法在解决路径查找、图的连通性等问题中非常有用。",-1),g={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},u={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.695ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3401 1000","aria-hidden":"true"},_=Q("",1),w=[_],x=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"O"),t("mo",{stretchy:"false"},"("),t("mi",null,"l"),t("mi",null,"o"),t("mi",null,"g"),t("mi",null,"n"),t("mo",{stretchy:"false"},")")])],-1),f=t("p",null,[t("strong",null,"最短路径算法")],-1),L=t("ul",null,[t("li",null,"迪杰斯特拉算法（Dijkstra's Algorithm）用于计算一个节点到其他所有节点的最短路径长度，前提是图中的边权值为非负。它通过不断地更新节点的最短路径估计值，直到找到所有节点的最短路径。例如，在一个交通网络地图中，可以用迪杰斯特拉算法来计算从一个地点到其他所有地点的最短行驶距离。"),t("li",null,"弗洛伊德算法（Floyd - Warshall Algorithm）则可以计算图中任意两点之间的最短路径，适用于边权值可以为负的情况（但不存在负权回路）。它通过动态规划的方法，利用一个二维数组来记录中间节点的信息，逐步更新最短路径。")],-1),M=t("p",null,[t("strong",null,"最小生成树算法")],-1),k=t("ul",null,[t("li",null,"普里姆算法（Prim's Algorithm）和克鲁斯卡尔算法（Kruskal's Algorithm）用于寻找无向连通图的最小生成树。最小生成树是指在一个带权无向连通图中，由边权值总和最小的边组成的树，它在网络设计、电路布线等领域有广泛应用。普里姆算法从一个起始节点开始，每次选择一条与已选节点集合相连的权值最小的边，直到所有节点都被包含在树中；克鲁斯卡尔算法则是先将所有边按照权值从小到大排序，然后依次选择不构成回路的边，直到形成一棵生成树。")],-1),V=t("p",null,[t("strong",null,"动态规划算法")],-1),H={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},y={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.719ex",height:"1.645ex",role:"img",focusable:"false",viewBox:"0 -705 760 727","aria-hidden":"true"},Z=t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D436",d:"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z",style:{"stroke-width":"3"}})])])],-1),v=[Z],b=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"C")])],-1),C={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},S={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 600 453","aria-hidden":"true"},D=t("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[t("g",{"data-mml-node":"math"},[t("g",{"data-mml-node":"mi"},[t("path",{"data-c":"1D45B",d:"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z",style:{"stroke-width":"3"}})])])],-1),A=[D],j=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"n")])],-1),P={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},B={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.36ex",height:"1.359ex",role:"img",focusable:"false",viewBox:"0 -443 1043 600.8","aria-hidden":"true"},I=Q("",1),N=[I],E=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msub",null,[t("mi",null,"w"),t("mi",null,"i")])])],-1),J={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},R={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.837ex",height:"1.359ex",role:"img",focusable:"false",viewBox:"0 -443 812 600.8","aria-hidden":"true"},z=Q("",1),G=[z],F=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msub",null,[t("mi",null,"v"),t("mi",null,"i")])])],-1),K={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},$={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"22.064ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 9752.2 1000","aria-hidden":"true"},q=Q("",1),O=[q],U=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"A"),t("mo",null,"="),t("mo",{stretchy:"false"},"["),t("mn",null,"1"),t("mo",null,","),t("mn",null,"3"),t("mo",null,","),t("mn",null,"4"),t("mo",null,","),t("mn",null,"5"),t("mo",null,","),t("mn",null,"6"),t("mo",null,","),t("mn",null,"7"),t("mo",null,","),t("mn",null,"7"),t("mo",null,","),t("mn",null,"8"),t("mo",{stretchy:"false"},"]")])],-1),W={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},X={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"24.221ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 10705.9 1000","aria-hidden":"true"},Y=Q("",1),t1=[Y],T1=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mi",null,"B"),t("mo",null,"="),t("mo",{stretchy:"false"},"["),t("mn",null,"3"),t("mo",null,","),t("mn",null,"5"),t("mo",null,","),t("mn",null,"7"),t("mo",null,","),t("mn",null,"4"),t("mo",null,","),t("mn",null,"8"),t("mo",null,","),t("mn",null,"6"),t("mo",null,","),t("mn",null,"7"),t("mo",null,","),t("mn",null,"8"),t("mo",null,","),t("mn",null,"2"),t("mo",{stretchy:"false"},"]")])],-1),e1=Q("",2);function a1(Q1,l1,s1,o1,n1,r1){return a(),e("div",null,[o,t("ul",null,[n,t("li",null,[T("快速排序（Quick Sort）和归并排序（Merge Sort）也是重点考查的排序算法。它们的时间复杂度在平均情况下可以达到 "),t("mjx-container",r,[(a(),e("svg",d,m)),h]),T("，相比前面的简单排序算法效率更高。快速排序采用分治法，通过选择一个基准元素，将数组分为两部分，使得左边部分的元素都小于等于基准元素，右边部分的元素都大于等于基准元素，然后递归地对这两部分进行排序。")])]),p,t("ul",null,[c,t("li",null,[T("二分搜索（Binary Search）用于在有序数组中快速查找特定元素。它的基本思想是将数组分成两部分，通过比较中间元素与目标元素的大小，确定目标元素可能存在的区间，然后继续在该区间进行搜索，每次搜索都能将搜索区间缩小一半，时间复杂度为 "),t("mjx-container",g,[(a(),e("svg",u,w)),x]),T("。")])]),f,L,M,k,V,t("ul",null,[t("li",null,[T("动态规划是一种用于解决优化问题的算法策略。例如，背包问题（Knapsack Problem）是一个典型的动态规划问题，包括0 - 1背包问题和完全背包问题。0 - 1背包问题是指有一个容量为 "),t("mjx-container",H,[(a(),e("svg",y,v)),b]),T(" 的背包和 "),t("mjx-container",C,[(a(),e("svg",S,A)),j]),T(" 个物品，每个物品有自己的重量 "),t("mjx-container",P,[(a(),e("svg",B,N)),E]),T(" 和价值 "),t("mjx-container",J,[(a(),e("svg",R,G)),F]),T("，每个物品只能选择放入背包一次，要求在不超过背包容量的情况下，使背包内物品的总价值最大。完全背包问题则是每个物品可以选择放入背包多次。")]),t("li",null,[T("最长公共子序列（Longest Common Subsequence，LCS）问题也是动态规划的常见应用。给定两个序列，如序列 "),t("mjx-container",K,[(a(),e("svg",$,O)),U]),T(" 和序列 "),t("mjx-container",W,[(a(),e("svg",X,t1)),T1]),T("，要求找出它们的最长公共子序列。通过动态规划，可以构建一个二维数组来记录两个序列中各个位置的最长公共子序列长度，从而有效地解决问题。")])]),e1])}const m1=l(s,[["render",a1]]);export{i1 as __pageData,m1 as default};
